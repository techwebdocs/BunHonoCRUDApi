"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compose = void 0;
const context_1 = require("./context");
// Based on the code in the MIT licensed `koa-compose` package.
const compose = (middleware, onError, onNotFound) => {
    return (context, next) => {
        let index = -1;
        return dispatch(0);
        async function dispatch(i) {
            if (i <= index) {
                return Promise.reject(new Error('next() called multiple times'));
            }
            let handler = middleware[i];
            index = i;
            if (i === middleware.length && next)
                handler = next;
            if (!handler) {
                if (context instanceof context_1.HonoContext && context.finalized === false && onNotFound) {
                    context.res = await onNotFound(context);
                }
                return Promise.resolve(context);
            }
            return Promise.resolve(handler(context, () => dispatch(i + 1)))
                .then((res) => {
                // If handler return Response like `return c.text('foo')`
                if (res && context instanceof context_1.HonoContext) {
                    context.res = res;
                }
                return context;
            })
                .catch((err) => {
                if (context instanceof context_1.HonoContext && onError) {
                    if (err instanceof Error) {
                        context.res = onError(err, context);
                    }
                    return context;
                }
                else {
                    throw err;
                }
            });
        }
    };
};
exports.compose = compose;
