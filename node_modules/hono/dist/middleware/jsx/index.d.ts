import type { HtmlEscapedString } from '../../utils/html';
declare global {
    namespace jsx.JSX {
        interface IntrinsicElements {
            [tagName: string]: Record<string, any>;
        }
    }
}
export { jsxFn as jsx };
declare const jsxFn: (tag: string | Function, props: Record<string, any>, ...children: (string | HtmlEscapedString)[]) => HtmlEscapedString;
declare type FC<T = Record<string, any>> = (props: T) => HtmlEscapedString;
export declare const memo: <T>(component: FC<T>, propsAreEqual?: (prevProps: Readonly<T>, nextProps: Readonly<T>) => boolean) => FC<T>;
export declare const Fragment: (props: {
    key?: string;
    children?: any;
}) => HtmlEscapedString;
