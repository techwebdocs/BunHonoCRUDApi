"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fragment = exports.memo = exports.jsx = void 0;
const html_1 = require("../../utils/html");
const emptyTags = [
    'area',
    'base',
    'br',
    'col',
    'embed',
    'hr',
    'img',
    'input',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr',
];
const booleanAttributes = ['checked', 'selected', 'disabled', 'readonly', 'multiple'];
const newHtmlEscapedString = (str) => {
    const escapedString = new String(str);
    escapedString.isEscaped = true;
    return escapedString;
};
const jsxFn = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag.call(null, { ...props, children: children.length <= 1 ? children[0] : children });
    }
    let result = tag !== '' ? `<${tag}` : '';
    const propsKeys = Object.keys(props || {});
    for (let i = 0, len = propsKeys.length; i < len; i++) {
        const v = props[propsKeys[i]];
        if (typeof v === 'string') {
            result += ` ${propsKeys[i]}="${(0, html_1.escape)(v)}"`;
        }
        else if (typeof v === 'number') {
            result += ` ${propsKeys[i]}="${v}"`;
        }
        else if (v === null || v === undefined) {
            // Do nothing
        }
        else if (typeof v === 'boolean' && booleanAttributes.includes(propsKeys[i])) {
            if (v) {
                result += ` ${propsKeys[i]}=""`;
            }
        }
        else if (propsKeys[i] === 'dangerouslySetInnerHTML') {
            if (children.length > 0) {
                throw 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.';
            }
            children = [newHtmlEscapedString(v.__html)];
        }
        else {
            result += ` ${propsKeys[i]}="${(0, html_1.escape)(v.toString())}"`;
        }
    }
    if (emptyTags.includes(tag)) {
        result += '/>';
        return newHtmlEscapedString(result);
    }
    if (tag !== '') {
        result += '>';
    }
    const flattenChildren = children.flat(Infinity);
    for (let i = 0, len = flattenChildren.length; i < len; i++) {
        const child = flattenChildren[i];
        if (typeof child === 'boolean' || child === null || child === undefined) {
            continue;
        }
        else if (typeof child === 'object' && child.isEscaped) {
            result += child;
        }
        else {
            result += (0, html_1.escape)(child.toString());
        }
    }
    if (tag !== '') {
        result += `</${tag}>`;
    }
    return newHtmlEscapedString(result);
};
exports.jsx = jsxFn;
const shallowEqual = (a, b) => {
    if (a === b) {
        return true;
    }
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    if (aKeys.length !== bKeys.length) {
        return false;
    }
    for (let i = 0, len = aKeys.length; i < len; i++) {
        if (a[aKeys[i]] !== b[aKeys[i]]) {
            return false;
        }
    }
    return true;
};
const memo = (component, propsAreEqual = shallowEqual) => {
    let computed = undefined;
    let prevProps = undefined;
    return ((props) => {
        if (prevProps && !propsAreEqual(prevProps, props)) {
            computed = undefined;
        }
        prevProps = props;
        return (computed || (computed = component(props)));
    });
};
exports.memo = memo;
const Fragment = (props) => {
    return jsxFn('', {}, ...(props.children || []));
};
exports.Fragment = Fragment;
